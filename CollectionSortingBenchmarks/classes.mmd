classDiagram
direction TB
class ISorter~TCollection~ {
    +Sort(ref TCollection input)
}
<<interface>> ISorter~TCollection~

class IIntArraySorter {
    +Sort(int[] input)
}
<<interface>> IIntArraySorter

class IIntListSorter {
    +Sort(List~int~ input)
}
<<interface>> IIntListSorter

ISorter <|.. IIntArraySorter
ISorter <|.. IIntListSorter

class IntListBubbleSorter {
    + Sort(List~int~ input)
}
class IntListMergeSorter {
    + Sort(List~int~ input)
}
class IntListQuickSorter {
    + Sort(List~int~ input)
}

IIntListSorter <|.. IntListBubbleSorter
IIntListSorter <|.. IntListMergeSorter
IIntListSorter <|.. IntListQuickSorter

class IntArrayBubbleSorter {
    + Sort(int[] input)
}
class IntArrayMergeSorter {
    + Sort(int[] input)
}
class IntArrayQuickSorter {
    + Sort(int[] input)
}

IIntArraySorter <|.. IntArrayBubbleSorter
IIntArraySorter <|.. IntArrayMergeSorter
IIntArraySorter <|.. IntArrayQuickSorter

class IPopulatedCollectionProvider~TCollection~ {
    +TCollection Get(int size)
}
class PopulatedIntListProvider {
    +int[] Get(int size)
}
class PopulatedIntArrayProvider {
    +List~int~ Get(int size)
}

IPopulatedCollectionProvider <|.. PopulatedIntListProvider
IPopulatedCollectionProvider <|.. PopulatedIntArrayProvider

class SorterBenchmarks~TCollection~ {
    + int Size
    - ISorter~TCollection~ sorter
    - IPopulatedCollectionProvider~TCollection~ provider
    + Setup()
    + Sort()
}
<<abstract>> SorterBenchmarks

SorterBenchmarks *-- ISorter
SorterBenchmarks *-- IPopulatedCollectionProvider